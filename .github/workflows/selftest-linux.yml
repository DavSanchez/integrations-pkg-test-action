name: Self-test linux action

on:
  push:
    branches:
      - master
      - main
  pull_request:

# ATTENTION
# This is a self-test pipeline and it is *NOT* intended to be used as a base/quickstart on how to
# use the action. Please refer to the examples in the README.md file for that

jobs:
  linux-local:
    runs-on: ubuntu-latest
    name: Local linux self-test
    strategy:
      matrix:
        distro: [ ubuntu, suse, rockylinux ]
    steps:
      - uses: actions/checkout@v2
      - name: Test local package on ${{ matrix.distro }}
        uses: ./linux
        with:
          tag: '1.3.0'
          integration: 'nri-snmp'
          upgrade: false # Needed for self-test not to fail due to downgrading package
          pkgDir: testdata/dist
          distros: ${{ matrix.distro }}

  linux-local-suse12:
    runs-on: ubuntu-latest
    name: Local linux self-test with suse 12.5
    steps:
      - uses: actions/checkout@v2
      - name: Test local package on ${{ matrix.distro }}
        uses: ./linux
        with:
          tag: '3.2.1'
          integration: 'nri-nginx'
          upgrade: false # Needed for self-test not to fail due to downgrading package
          pkgDir: testdata/dist
          distros: registry.suse.com/suse/sles12sp5:latest

  linux-remote-staging:
    runs-on: ubuntu-latest
    name: Remote linux self-test on staging Repo
    strategy:
      matrix:
        distro: [ ubuntu, suse, rockylinux ]
    steps:
      - uses: actions/checkout@v2
      - name: Test staging package on ${{ matrix.distro }}
        uses: ./linux
        with:
          tag: '.' # Match anything, just for testing
          integration: 'nri-f5'
          upgrade: false
          packageLocation: 'repo'
          pkgDir: testdata/dist # PKGDir must exist or docker will fail to `COPY` things
          stagingRepo: true
          distros: ${{ matrix.distro }}

  linux-remote-prod:
    runs-on: ubuntu-latest
    name: Remote linux self-test on prod Repo
    strategy:
      matrix:
        distro: [ ubuntu, suse, rockylinux ]
    steps:
      - uses: actions/checkout@v2
      - name: Test staging package on ${{ matrix.distro }}
        uses: ./linux
        with:
          tag: '.' # Match anything, just for testing
          integration: 'nri-f5'
          upgrade: false
          packageLocation: 'repo'
          pkgDir: testdata/dist # PKGDir must exist or docker will fail to `COPY` things
          stagingRepo: false
          distros: ${{ matrix.distro }}

  linux-remote-specific-version-staging:
    runs-on: ubuntu-latest
    name: Remote linux self-test on specific staging Repo
    strategy:
      matrix:
        distro: [ "ubuntu:jammy", "debian:bullseye", "registry.suse.com/suse/sle15:15.3" ]
    steps:
      - uses: actions/checkout@v2
      - name: Test staging package on ${{ matrix.distro }}
        uses: ./linux
        with:
          # This is an old version from the repo, it should be changed to an existing one in case
          # it's removed and the pipleline fails.
          # The reason to hardcode it instead of getting the list of Packages from S3, is that the url used
          # could also disappear if we remove one of the specific distribution version used.
          tag: '2.5.3'
          repoVersion: '2.5.3'
          integration: 'nri-f5'
          upgrade: false
          packageLocation: 'repo'
          pkgDir: testdata/dist # PKGDir must exist or docker will fail to `COPY` things
          stagingRepo: true
          distros: ${{ matrix.distro }}

  linux-remote-specific-version-prod:
    runs-on: ubuntu-latest
    name: Remote linux self-test on specific prod Repo
    strategy:
      matrix:
        distro: [ "ubuntu:jammy", "debian:bullseye", "registry.suse.com/suse/sle15:15.3" ]
    steps:
      - uses: actions/checkout@v2
      - name: Test staging package on ${{ matrix.distro }}
        uses: ./linux
        with:
          # This is an old version from the repo, it should be changed to an existing one in case
          # it's removed and the pipleline fails.
          # The reason to hardcode it instead of getting the list of Packages from S3, is that the url used
          # could also disappear if we remove one of the specific distribution version used.
          tag: '2.5.3'
          repoVersion: '2.5.3'
          integration: 'nri-f5'
          upgrade: false
          packageLocation: 'repo'
          pkgDir: testdata/dist # PKGDir must exist or docker will fail to `COPY` things
          stagingRepo: false
          distros: ${{ matrix.distro }}
